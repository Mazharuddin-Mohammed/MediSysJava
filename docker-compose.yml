version: '3.8'

services:
  # PostgreSQL Database
  medisys-db:
    image: postgres:16.9
    container_name: medisys-database
    environment:
      POSTGRES_DB: medisys
      POSTGRES_USER: medisys_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-medisys_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - medisys-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medisys_user -d medisys"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache
  medisys-redis:
    image: redis:7.2-alpine
    container_name: medisys-cache
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - medisys-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MediSys Application
  medisys-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medisys-application
    environment:
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: jdbc:postgresql://medisys-db:5432/medisys
      SPRING_DATASOURCE_USERNAME: medisys_user
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-medisys_secure_password}
      SPRING_REDIS_HOST: medisys-redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_password}
      JAVA_OPTS: "-Xms1g -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
    ports:
      - "8080:8080"
      - "8081:8081"  # Management port
    depends_on:
      medisys-db:
        condition: service_healthy
      medisys-redis:
        condition: service_healthy
    networks:
      - medisys-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: medisys-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - medisys-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: medisys-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_secure_password}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - medisys-network
    restart: unless-stopped

  # Redis Exporter for Monitoring
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: medisys-redis-exporter
    environment:
      REDIS_ADDR: "redis://medisys-redis:6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_password}
    ports:
      - "9121:9121"
    depends_on:
      - medisys-redis
    networks:
      - medisys-network
    restart: unless-stopped

  # PostgreSQL Exporter for Monitoring
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: medisys-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://medisys_user:${DB_PASSWORD:-medisys_secure_password}@medisys-db:5432/medisys?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - medisys-db
    networks:
      - medisys-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  medisys-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
